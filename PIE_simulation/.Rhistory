times[i] <- as.numeric(end_run - start_run)
}
ERR <- abs(PIE / pi - 1) * 100
results <- list(estimation = PIE, tE = times, error = ERR)
return(results)
}
# ---> PIE simulation Monte Carlo
n_ligne = 100
n_col = 6
Simulation_resultat <- PIE_simulation(n_ligne, n_col) # We get our simulation
PIE <- Simulation_resultat$estimation # Defining our observation matrix
tE <- Simulation_resultat$tE # Execution time
ERR <- Simulation_resultat$error # Error between the real value of pi and our simulation matrix
par(mfrow=c(1,2),mar=c(4,4,2,2)+0.1)
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
plot(10 ** (1:n_col), tE, type='b', main='the mean time of a simulation', log='x', xlab='#points', ylab='Time (seconde)')
resultat <- function(n_iteration_points)
{
df <- data.frame(iteration<- 1:n_iteration_points)
#df$iteration <- 1:n_iteration_points
df$x <- runif(n_iteration_points, 0, 1)
df$y <- runif(n_iteration_points, 0, 1)
df$inside_circle <- ifelse(sqrt(df$x^2 + df$y^2) <= 1, 1, 0)
df$PIE <- 4 * cumsum(df$inside_circle) / df$iteration
df$ERR <- abs(df$PIE / pi - 1)
colnames(df)[colnames(df) == colnames(df)[1]] <- "Iteration"
return(df)
}
res <- resultat(10**6)
par(mfrow = c(3, 1))
colnames(res)
plot(res[,"Iteration"], res[,"PIE"], type='b', main='The progression of pie simulation', log='x', xlab='#points', ylab='Pie Value')
plot(res[,"Iteration"], res[,"PIE"], type='b', main='The progression of pie simulation', log='x', xlab='#points', ylab='Pie Value')
plot(res[,"Iteration"], res[,"PIE"], type='b', main='The progression of pie simulation', log='x', xlab='#points', ylab='Pie Value')
plot(res[,"Iteration"], res[,"PIE"], type='l', main='The progression of pie simulation', log='x', xlab='#points', ylab='Pie Value')
par(mfrow = c(2, 1))
plot(res[,"Iteration"], res[,"PIE"], type='l', main='The progression of pie simulation', log='x', xlab='#points', ylab='Pie Value')
plot(res[,"Iteration"], res[,"ERR"], type='b', main='Relative error of pie simulation', log='x', xlab='#points', ylab='Relative Error')
plot(res[,"Iteration"], res[,"ERR"], type='b', main='Relative error of pie simulation', log='x', xlab='#points', ylab='Relative Error')
mc.pi(10**6)
mc.pi <- function(n, r = 1)
# The function is a simulation of monte carlo simulation
# to compute an approximation of pie value
# param :
# n ; Number of iteration (simulation)
# r : is a the circle ray
{
if(n <=1)
{
stop("The simulation number must be greater than 1")
}
cords <- matrix(runif(2*n, 0, r), ncol = 2)
distances <- cords[, 1]**2 + cords[, 2]**2
inside_circle <- sum(distances <= r)
return((inside_circle/ n) * 4)
}
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Approximate Pi Value"),
sidebarLayout(
sidebarPanel(
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
actionButton("calculate", "Calculate")
),
mainPanel(
verbatimTextOutput("result")
)
)
)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- mc.pi(n)
output$result <- renderText({
paste("Approximation of Pi:", result)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- mc.pi(n)
output$result <- renderText({
paste("Approximation of Pi:", result)
})
})
}
shinyApp(ui = ui, server = server)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Approximate Pi Value"),
sidebarLayout(
sidebarPanel(
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
actionButton("calculate", "Calculate")
),
mainPanel(
verbatimTextOutput("result")
)
)
)
shinyApp(ui = ui, server = server)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- mc.pi(n)
output$result <- renderText({
paste("Approximation of Pi:", result)
})
# Generate Monte Carlo plot
x <- runif(n)
y <- runif(n)
plot_data <- data.frame(x, y)
plot <- ggplot(plot_data, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside")))
output$plot <- renderPlot({
plot
})
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
shinyApp(ui = ui, server = server)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Approximate Pi Value"),
sidebarLayout(
sidebarPanel(
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
actionButton("calculate", "Calculate")
),
mainPanel(
verbatimTextOutput("result")
)
)
)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- mc.pi(n)
output$result <- renderText({
paste("Approximation of Pi:", result)
})
# Generate Monte Carlo plot
x <- runif(n)
y <- runif(n)
plot_data <- data.frame(x, y)
plot <- ggplot(plot_data, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside")))
output$plot <- renderPlot({
plot
})
})
}
shinyApp(ui = ui, server = server)
mc.pi <- function(n, r = 1)
# The function is a simulation of monte carlo simulation
# to compute an approximation of pie value
# param :
# n ; Number of iteration (simulation)
# r : is a the circle ray
{
if(n <=1)
{
stop("The simulation number must be greater than 1")
}
cords <- matrix(runif(2*n, 0, r), ncol = 2)
distances <- cords[, 1]**2 + cords[, 2]**2
inside_circle <- sum(distances <= r)
return((inside_circle/ n) * 4)
}
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Approximate Pi Value"),
sidebarLayout(
sidebarPanel(
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
actionButton("calculate", "Calculate")
),
mainPanel(
verbatimTextOutput("result")
)
)
)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- mc.pi(n)
output$result <- renderText({
paste("Approximation of Pi:", result)
})
# Generate Monte Carlo plot
x <- runif(n)
y <- runif(n)
plot_data <- data.frame(x, y)
plot <- ggplot(plot_data, aes(x, y)) +
geom_point(aes(color = ifelse(x^2 + y^2 <= 1, "Inside", "Outside")))
output$plot <- renderPlot({
plot
})
})
}
shinyApp(ui = ui, server = server)
# Define the UI for the Shiny app
ui <- fluidPage(
titlePanel("Approximate Pi Value"),
sidebarLayout(
sidebarPanel(
numericInput("n", "Number of Iterations:", value = 1000, min = 1, step = 1),
numericInput("x", "Number of Iterations:", value = 1000, min = 1, step = 1),
actionButton("calculate", "Calculate")
),
mainPanel(
verbatimTextOutput("result")
)
)
)
# Define the server for the Shiny app
server <- function(input, output) {
observeEvent(input$calculate, {
n <- input$n
result <- n + x
output$result <- renderText({
paste("Approximation of Pi:", result)
})
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
PIE
mean(PIE[,colnames(PIE)])
table(PIE)
summary(PIE)
# ---> PIE simulation Monte Carlo
n_ligne = 200
n_col = 6
Simulation_resultat <- PIE_simulation(n_ligne, n_col) # We get our simulation
summary(PIE)
summary(res)
ggplot(res, aes(x = iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
res <- na.omit(res)
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
setwd("D:/user_data/Portfolio_data_analysis/Monte_carlo_simulation_AREA/PIE_simulation")
## main #################################
# ---> Circle visualization
par(mfrow = c(3, 1))
Circle(50)
Circle(500)
rm(list = ls())
set.seed(123)
Circle <- function(n, r = 1)
{
# Example of Monte Carlo simulation for a circle
# This example will help as to understand how we can
# compute an approximate value of pie
# n ; Number of iteration (simulation)
# r : is a the circle ray
# ---> 1 - Let's draw a circle
angles <- seq(0, 2 * pi, length.out = n + 1)
x1 <- r * cos(angles)
y1 <- r * sin(angles)
# ---> 2 - Generate a couple of random points
x_random <- runif(n, -r, r)
y_random <- runif(n, -r, r)
# ---> 3 - Verify if our couple points are inside the circle
# This will give us a list of position where (x,y) couple are inside the circle
inside_circle <- which(sqrt(x_random^2 + y_random^2) <= r)
# Visualization
plot(x1, y1, type ="l") # Show the circle
points(x_random[inside_circle], y_random[inside_circle], col='firebrick', pch=20) # Show the points inside the circle
points(x_random[-inside_circle], y_random[-inside_circle], col='darkblue', pch=20) # Show the points outside the circle
}
## main #################################
# ---> Circle visualization
par(mfrow = c(3, 1))
Circle(50)
Circle(500)
Circle(5000)
mc.pi <- function(n, r = 1)
# The function is a simulation of monte carlo simulation
# to compute an approximation of pie value
# param :
# n ; Number of iteration (simulation)
# r : is a the circle ray
{
if(n <=1)
{
stop("The simulation number must be greater than 1")
}
cords <- matrix(runif(2*n, 0, r), ncol = 2)
distances <- cords[, 1]**2 + cords[, 2]**2
inside_circle <- sum(distances <= r)
return((inside_circle/ n) * 4)
}
# ---> PIE estimation
points_iteration = c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
res <- sapply(points_iteration, function(n) mc.pi(n))
names(res) <- points_iteration
par(mfrow = c(1,1))
plot(points_iteration, res, type = "l") #
# ---> PIE simulation Monte Carlo
n_ligne = 200
n_col = 6
Simulation_resultat <- PIE_simulation(n_ligne, n_col) # We get our simulation
PIE <- Simulation_resultat$estimation # Defining our observation matrix
tE <- Simulation_resultat$tE # Execution time
ERR <- Simulation_resultat$error # Error between the real value of pi and our simulation matrix
resultat_PIE_Simulation <- function(n_iteration_points)
{
df <- data.frame(iteration<- 1:n_iteration_points)
#df$iteration <- 1:n_iteration_points
df$x <- runif(n_iteration_points, 0, 1)
df$y <- runif(n_iteration_points, 0, 1)
df$inside_circle <- ifelse(sqrt(df$x^2 + df$y^2) <= 1, 1, 0)
df$PIE <- 4 * cumsum(df$inside_circle) / df$iteration
df$ERR <- abs(df$PIE / pi - 1)
colnames(df)[colnames(df) == colnames(df)[1]] <- "Iteration"
return(df)
}
Simulation_resultat <- PIE_simulation(n_ligne, n_col) # We get our simulation
PIE <- Simulation_resultat$estimation # Defining our observation matrix
tE <- Simulation_resultat$tE # Execution time
ERR <- Simulation_resultat$error # Error between the real value of pi and our simulation matrix
# ---> ERROR AND SPEED VISUALIZATION
par(mfrow=c(1,2),mar=c(4,4,2,2)+0.1)
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
plot(10 ** (1:n_col), tE, type='b', main='the mean time of a simulation', log='x', xlab='#points', ylab='Time (seconde)')
PIE_simulation<- function(n_ligne, n_col)
{
# this function help us to understand more the Monte Carlo
# simulation.
# the goal is to create a matrix and times running vector
# to visualize the evolution of pie estimation
# param
# n_ligne :  number of time we simulate the pie value
# n_col : number of points used for the simulation
PIE <- matrix(0, n_ligne, n_col)
times <- numeric(n_col)
for(i in 1:n_col)
{
start_run <- Sys.time()
PIE[,i] <- replicate(n_ligne, mc.pi(10**i))
end_run <- Sys.time()
times[i] <- as.numeric(end_run - start_run)
}
ERR <- abs(PIE / pi - 1) * 100
results <- list(estimation = PIE, tE = times, error = ERR)
return(results)
}
Simulation_resultat <- PIE_simulation(n_ligne, n_col) # We get our simulation
PIE <- Simulation_resultat$estimation # Defining our observation matrix
tE <- Simulation_resultat$tE # Execution time
ERR <- Simulation_resultat$error # Error between the real value of pi and our simulation matrix
# ---> ERROR AND SPEED VISUALIZATION
par(mfrow=c(1,2),mar=c(4,4,2,2)+0.1)
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
plot(10 ** (1:n_col), tE, type='b', main='the mean time of a simulation', log='x', xlab='#points', ylab='Time (seconde)')
# ---> Data set PIE Simulation
res <- resultat(10**6)
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
library(rlang)
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
# ---> Data set PIE Simulation
res <- resultat(10**6)
resultat_PIE_Simulation
# ---> Data set PIE Simulation
res <- resultat_PIE_Simulation(10**6)
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
PIE
ERR
# ---> Save data
write.csv2(PIE, file = "PIE.csv", row.names = FALSE)
write.csv2(ERR, file = "ERR.csv", row.names = FALSE)
write.csv2(res, file = "MC_simulation_for_PIE.csv", row.names = FALSE)
as.data.frame(PIE)
# ---> Save data
PIE <- as.data.frame(PIE)
ERR <- as.data.frame(ERR)
coll <- 1:6
colnames(PIE) <- coll
colnames(PIE)
col_names_for_data <- 10^1 : 10^dim(PIE)[1]
col_names_for_data <- 10^1:10^dim(PIE)[1]
col_names_for_data <- 10**1:10**dim(PIE)[1]
col_names_for_data <- 10**1:10**4
col_names_for_data <- 10**1:10**n_col
# ---> Save data
col_names_for_data <- 10**1:10**n_col
PIE <- as.data.frame(PIE)
ERR <- as.data.frame(ERR)
colnames(PIE) <- col_names_for_data
colnames(ERR) <- col_names_for_data
PIE
ERR
colnames(ERR) <- col_names_for_data
col_names_for_data
10^(1:6)
# ---> Save data
col_names_for_data <- 10^(1:6)
PIE <- as.data.frame(PIE)
ERR <- as.data.frame(ERR)
colnames(PIE) <- col_names_for_data
colnames(ERR) <- col_names_for_data
write.csv2(PIE, file = "PIE.csv", row.names = FALSE)
write.csv2(ERR, file = "ERR.csv", row.names = FALSE)
plot(points_iteration, res, type = "l") #
# ---> PIE estimation
points_iteration = c(10, 100, 1000, 10000, 100000, 1000000, 10000000)
res <- sapply(points_iteration, function(n) mc.pi(n))
names(res) <- points_iteration
par(mfrow = c(1,1))
plot(points_iteration, res, type = "l") #
# ---> ERROR AND SPEED VISUALIZATION
par(mfrow=c(1,2),mar=c(4,4,2,2)+0.1)
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
plot(10 ** (1:n_col), tE, type='b', main='the mean time of a simulation', log='x', xlab='#points', ylab='Time (seconde)')
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
# ---> ERROR AND SPEED VISUALIZATION
par(mfrow=c(1,2),mar=c(4,4,2,2)+0.1)
boxplot(ERR, main='Relative error on PI (10**points)', log='y', xlab='#points', ylab='Rel. Error')
plot(10 ** (1:n_col), tE, type='b', main='the mean time of a simulation', log='x', xlab='#points', ylab='Time (seconde)')
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
# ---> Data set PIE Simulation
res <- resultat_PIE_Simulation(10**6)
ggplot(res, aes(x = Iteration, y = PIE)) +
geom_line(col = "blue") +
geom_hline(yintercept = pi) +
ylim(c(3, 3.3)) +
labs(title = expression(paste("Approximation of ", pi)),
x = "number of points",
y = expression(paste("estimated value of ",pi)))
## main #################################
# ---> Circle visualization
par(mfrow = c(3, 1))
Circle(50)
Circle(500)
Circle(5000)
# List all loaded packages
loaded_packages <- search()
loaded_packages <- loaded_packages[grepl("^package:", loaded_packages)]
loaded_packages <- sub("^package:", "", loaded_packages)
print(loaded_packages)
library(ggplot2)
gc()
reticulate::repl_python()
print("hrllo")
print("hrllo")
def MC(n):
for i in 1:n:
def MC(n):
for(i in 1:n):
def MA(n):
return n
MA(55)
